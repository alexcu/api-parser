<%#
    Marshal dynamic arrays...
%>

    // Based on: https://social.msdn.microsoft.com/Forums/vstudio/en-US/0f5ba27d-92c2-4b41-b717-16e759b68087/how-to-marshal-an-array-of-struct-pointer?forum=csharpgeneral
    private static IntPtr ToIntPtr<T>(T[] items)
    {
        IntPtr result, tmp = IntPtr.Zero;

        int length = Marshal.SizeOf<T>();
        int totalLength = length * items.Length;

        result = Marshal.AllocHGlobal(totalLength);

        int start = 0;
        byte[] data = new byte[totalLength];   //prepare to get the whole items array to this bytes array
        foreach (T item in items)
        {
            tmp = Marshal.AllocHGlobal(length);
            Marshal.StructureToPtr(item, tmp, false);

            Marshal.Copy(tmp, data, start, length);
            start += length;
            Marshal.FreeHGlobal(tmp);
        }
        Marshal.Copy(data, 0, result, totalLength);

        return result;
    }

    private static T[] FromIntPtr<T>(IntPtr ptr, int count)
    {
        T[] result = new T[count];
        IntPtr tmp;

        int size = Marshal.SizeOf<T>();
        int totalSize = size * count;
        byte[] data = new byte[totalSize];

        Marshal.Copy(ptr, data, 0, totalSize);

        tmp = Marshal.AllocHGlobal(size);

        for (int i = 0; i < count; i++)
        {
          Marshal.Copy(data, i * size, tmp, size);
          result[i] = Marshal.PtrToStructure<T>(tmp);
        }

        Marshal.FreeHGlobal(tmp);
        return result;
    }

<%
  @vector_types.each do |type|
    sk_type = sk_type_for(type)
    lib_type = lib_type_for(type)
%>
<%#
    Create the record to map between languages.
%>

    [ StructLayout( LayoutKind.Sequential, CharSet=CharSet.Ansi )]
    private struct __sklib_vector_<%= type %>
    {
      internal IntPtr _data_from_app;
      public <%= lib_type %>[] data_from_app
      {
        set
        {
          _data_from_app = ToIntPtr(value);
        }
      }
      public uint size_from_app;
      private IntPtr _data_from_lib;
      public <%= lib_type %>[] data_from_lib
      {
        get
        {
          return FromIntPtr<<%= lib_type %>>(_data_from_lib, (int)size_from_lib);
        }
      }
      public uint size_from_lib;
    }
<%#
    Create a function to free our part of the mapped data. This is the
    function to free the library part of the vector mapping.
%>

    [DllImport("splashkit.dll", CallingConvention=CallingConvention.Cdecl, EntryPoint="__sklib__free__sklib_vector_<%= type %>", CharSet=CharSet.Ansi)]
    private static extern void __sklib__free__sklib_vector_<%= type %>(__sklib_vector_<%= type %> v);

<%#
   Free our part
%>
    private static void __skadapter__free__sklib_vector_<%= type %>(ref __sklib_vector_<%= type %> v)
    {
      System.Console.WriteLine("Freeing data");
      Marshal.FreeHGlobal(v._data_from_app);
    }
<%#
    Converts a array of type into a __sklib__vector by allocating each of its
    members onto the heap.
%>
    private static __sklib_vector_<%= type %> __skadapter__to_sklib_vector_<%= type %>(List<<%= sk_type %>> v)
    {
      int i = 0;
      __sklib_vector_<%= type %> result = new __sklib_vector_<%= type %>();

      result.size_from_lib = 0;
      result.size_from_app = (uint)v.Count;
      <%= lib_type %>[] tmp = new <%= lib_type %>[result.size_from_app];

      foreach(<%= sk_type %> d in v)
      {
        tmp[i] = __skadapter__to_sklib_<%= type %>(v[i]);
        i++;
      }

      result.data_from_app = tmp;
      return result;
    }
<%#
    Converts a __sklib__vector to a dynamic array of type by copying each of
    its members into the dynamic array
%>
    private static List<<%= sk_type %>> __skadapter__to_vector_<%= type %>(__sklib_vector_<%= type %> v)
    {
      List<<%= sk_type %>> result = new List<<%= sk_type %>>();
      for (int i = 0; i < v.size_from_lib; i++)
      {
        result.Add(__skadapter__to_<%= type %>(v.data_from_lib[i]));
      }
<%
    # We need to ask the SplashKit library to free the
    # space it allocated for this dynamic on returning a vector. Then we
    # return our copy of this.
%>
      __sklib__free__sklib_vector_<%= type %>(v);
      return result;
    }
<%#
    These update functions take existing std::vector or sklib_vector values
    and update them. These are used with pass by ref parameters to update the
    sklib_vector or std::vector from the other component.
%>
    private static void __skadapter__update_from_vector_<%= type %>(ref __sklib_vector_<%= type %> v, List<<%= sk_type %>> __skreturn)
    {
      __skreturn.Clear();
      for (int i = 0; i < v.size_from_lib; i++)
      {
        __skreturn.Add(__skadapter__to_<%= type %>(v.data_from_lib[i]));
      }
      <%# Now it is copied... we need to get the library to free this! %>
      __sklib__free__sklib_vector_<%= type %>(v);
    }
<%
  end # end vectors.each
%>
